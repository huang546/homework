                                                                 实习报告
题目:约瑟夫环问题的一种描述是：编号为1,2,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。一开始任选一个正整数作为报数上限值m，从第一个人开始按顺时针方向自1开始顺序报数，报到m时停止报数。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一个人开始重新从1报数，如此下去，直至所有人全部出列为止。试设计一个程序求出出列顺序。
班级：电信1809班 姓名：黄智奇 学号：U201813490 完成日期：2019.3.25
一·需求分析
1.本程序中将密码和序号关联，先按序号找密码然后输出该序号，之后重新将获得的密码作为下个循环的顺序，依次循环，输出找到的序号。输出的结果为出列顺序（序号）。
2.演示程序以用户与计算机的对话方式进行，即在计算机上显示提示信息后，由用户在键盘上输入值；最终结果显示在其后。
3.测试数据为原题提供的密码即3，1，7，2，4，8，4和上限m20，第一个m为6。
二.概要设计
为实现上述程序功能，应构造单循环链表进行操作，并以数组形式提供顺序即密码。为此需要抽象数据类型为线性表。
1，线性表表的抽象数据类型定义为：
ADT List {
数据对象：D＝{ | ∈ ElemSet, i=1,2,...,n, n≥0 }
数据关系：R1＝{ <ai-1 ,ai >| ,∈D, i=2,...,n }基本操作：
InitList( &L )
　　　操作结果：构造一个空的线性表 L 。
DestroyList( &L )
　　　初始条件：线性表 L 已存在。
　　　操作结果：销毁线性表 L 。
ListLength( L )
　　　初始条件：线性表 L 已存在。
　　　操作结果：返回 L 中元素个数。
GetElem( L, i, &e )
　　　初始条件：线性表 L 已存在，1≤i≤LengthList(L)。
　　　操作结果：用 e 返回 L 中第 i 个元素的值。
LocateElem( L, e, compare( ) )
　　　初始条件：线性表 L 已存在，compare( ) 是元素判定函数。
　　　操作结果：返回 L 中第1个与 e 满足关系 compare( ) 的元素的位序。
　　　　　　　　若这样的元素不存在，则返回值为0。
　ListTraverse(L, visit( ))
　　初始条件：线性表 L 已存在，visit( ) 为元素的访问函数。
　　操作结果：依次对 L 的每个元素调用函数 visit( )。
　　　　　　　一旦 visit( ) 失败，则操作失败。
　ListInsert( &L, i, e )
　　　初始条件：线性表 L 已存在，1≤i≤LengthList(L)+1。
　　　操作结果：在 L 的第 i 个元素之前插入新的元素 e，L 的长度增1。
　ListDelete( &L, i, &e )
　　　初始条件：线性表 L 已存在且非空，1≤i≤LengthList(L)。
　　　操作结果：删除 L 的第 i 个元素，并用 e 返回其值，L 的长度减1。 
} ADT List
2.本程序包含三个模块：
1）主程序模块：
void main()
{
初始化；
Do{
接受命令；
处理命令；
}while(命令！=“退出”)；
}
2）结点模块  
3）函数模块  
各模块之间的调用关系为主程序模块中包含结点模块和函数模块。
三．详细设计
#include <stdio.h>
#include <stdlib.h>
int Num[7]={1,2,3,4,5,6,7};
int KeyW[7]={3,1,7,2,4,8,4};
typedef struct LNode{
    int num;
    int keyword;
    struct LNode * next;
}LNode,*LinkList;
void Joseph(LinkList p,int m,int x)//x是人数
{
    LinkList q;
    int i;
    if(x==0) return;
    q=p;
    m%=x;
    if(m==0) m=x;
    for(i=1;i<=m;++i) //找到第m个人 p指向要删除的人的前一人 q指向要删除的人
    {
        p=q;
        q=p->next;
    }
    p->next=q->next;//删除q
    i=q->keyword;
    printf("%d ",q->num);
    free(q);
    Joseph(p,i,x-1)；//递归调用 总人数减1，输入新的密码 
}
void main()
{
    int i,m;
    LinkList Lhead,p,q;
    Lhead=(LinkList)malloc(sizeof(LNode));
    Lhead->num=Num[0];
    Lhead->keyword=KeyW[0];
    Lhead->next=NULL;
    p=Lhead;
    for(i=1;i<7;i++){
        if(!(q=(LinkList)malloc(sizeof(LNode)))) return;
        q->num=Num[i];
        q->keyword=KeyW[i];
        p->next=q;
        p=q;
    }
    p->next=Lhead; //构造循环链表
    printf("请输入m :\n");
    scanf("%d",&m);
    printf("输出的序号是：\n");
    Joseph(p,m,7);
}
四．	用户手册
1.本程序的运行环境为 ，执行文件为 。
2.按照计算机上显示提示信息，在键盘上输入值m，顺序结果显示在其后。
五，测试结果
输入m的值6后，显示出出列顺序为6，1，4，7，2，3，5。
六，附录
源程序文件名清单：
Node.H          //元素结点实现单元
OrdList.H        //有序链表实现单元
SetDemos.C      //主程序

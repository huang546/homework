

                                                                 实习报告

题目:假设停在火车调度站入口处的车厢序列的编号依次为1，2，3，…，n。设计一个程序，求出所有可能由此输出长度为n的车厢序列。

一·需求分析

1.本程序应用栈的思想，通过两种情况：输出或者压入元素，进行递归以求出可能的顺序
2.演示程序以修改车厢数量对应的函数中的变量值，来求出所有顺序。
3.测试数据为三节车厢。

二.概要设计

为实现上述程序功能，应构造栈结构进行操作，以数组形式利用栈的操作。为此需要抽象数据类型为栈。

1，栈的抽象数据类型定义为：
ADT Stack{
数据对象：D={ai|ai∈ElemSet, i=1,2, …,n, n

基本操作：
   InitStack( &S )
     操作结果：构造一个空栈S。

   DestroyStack ( &S )
     初始条件：栈S已存在。
     操作结果：销毁栈S。

   ClearStack( &S )
     初始条件：栈S已存在。
     操作结果：将S清为空栈。

   StackEmpty( S )
     初始条件：栈S已存在。
     操作结果：若S为空栈，则返回TRUE，否则返回FALSE。
   
StackLength( S )
     初始条件：栈S已存在。
     操作结果：返回S的数据元素个数，即栈的长度。

   GetTop( S, &e )
     初始条件：栈S已存在且非空。
     操作结果：用e返回S的栈顶元素。

   Push( &S, e )
     初始条件：栈S已存在。
     操作结果：插入元素e为新的栈顶元素。

   Pop( &S, &e )
     初始条件：栈S已存在且非空。
     操作结果：删除S的栈顶元素，并用e返回其值。

   StackTraverse( S, visit() )
     初始条件：栈S已存在且非空。
     操作结果：从栈底到栈顶依次对S的每个数据元素调用函数visit()。一旦visit()失败，则操作失败

2）栈类型  

3）函数模块  

各模块之间的调用关系为主程序模块中包含结点模块和函数模块。

三．详细设计
int b[10];
int a[10];
int j;
struct SeqStack
{
    int a[10];   // 存储元素的数组
    int Top;       //栈顶指针
}SeqStack;
int Pop(struct SeqStack* L)
{
    if(L->Top == 0)
    {
        return 0;
    }
    printf("%d ",L->a[--L->Top]);

    return 1;
}
int Push(struct SeqStack* L, int e)
{
    if(L->Top== 9)
    {
        return 0;
    }
    L->a[L->Top++] = e;
    return 1;
}
void f(int i,int t,int m,int n){
if(n==t&&m==0){
        for(j=0;j<t;j++)
			{printf("%d",a[j]);}
             printf("\n");}
 if (m>=1){
a[n]=b[m-1];
f(i,t,m-1,n+1);
}
 if(i<=t)
 {
     int x;
     x=b[m];
     b[m]=i;
     f(i+1,t,m+1,n);
     b[m]=x;
 }
}

 void main()
{
 f(1,3,0,0);
}

四．	用户手册

1.本程序的运行环境为 ，执行文件为 。

2.修改调用函数的数据m值，可得不同车厢个数的结果。

五，测试结果

输入m的值3后，显示出出列顺序为
123
132
213
231
321。

六，附录

源程序文件名清单：

stkpas.H          //栈类型

SetDemos.C      //主程序
